# Copyright (C) 2020 Red Hat, Inc.
#
# This program is free software: you can redistribute it and/or modify it under
# the terms of the GNU General Public License as published by the Free Software
# Foundation, either version 3 of the License, or (at your option) any later
# version.
#
# This program is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with
# this program.  If not, see <https://www.gnu.org/licenses/>.

---

- import_playbook: ceph-fsid.yml

- hosts: mon-000
  become: yes
  tasks:
  - name: allow pool deletion
    shell: ceph config set mon mon_allow_pool_delete true

  - name: allow distributed ephemeral pins
    shell: ceph config set mds mds_export_ephemeral_distributed true

  - name: allow random ephemeral pins
    shell: ceph config set mds mds_export_ephemeral_random true

- hosts: mds-000
  become: yes
  tasks:
  - name: compute MDS cache memory limit
    # (RAM*1024) / 2.5
    shell: grep MemTotal /proc/meminfo | awk '{ print int(($2 * 1024) / 3) * 2}'
    delegate_to: mds-000
    run_once: true
    register: mdsmem

  - name: set MDS cache size
    shell: ceph config set mds mds_cache_memory_limit "{{ mdsmem.stdout }}"
    run_once: true
    delegate_to: mon-000

- hosts: all
  become: yes
  tasks:
  - name: cp ceph-gather.py
    copy: src=../misc/ceph-gather.py dest=/ owner=root group=root mode=0755

  - name: cp ceph-gather.service
    copy: src=../misc/ceph-gather.service dest=/etc/systemd/system/ owner=root group=root mode=0644

  - name: install packages
    yum: name=htop,jq,rsync

  - name: create htoprc dir
    file: path=/root/.config/htop state=directory

  - name: install htoprc
    copy: src=../misc/htoprc dest=/root/.config/htop/ owner=root group=root mode=0644

# Make sure /cephfs is unmounted if it exists otherwise the check that creates /mnt will hang.
- import_playbook: kernel-umount.yml
- import_playbook: cephfs-destroy.yml

- hosts: mon-000
  become: yes
  vars:
    dedicated_metadata_osds: osd.0 osd.1 osd.2 osd.3
  tasks:
  - name: get osds
    shell: "ceph osd ls"
    register: osds

  - name: remove all device classes
    shell: "ceph osd crush rm-device-class {{ osds.stdout | replace('\n', ' ') }}"

  - name: setup ssd device class
    shell: "ceph osd crush set-device-class ssd {{ osds.stdout | replace('\n', ' ') }}"

  - name: create replicated ssd crush rule
    shell: ceph osd crush rule create-replicated class-ssd default host ssd

  - name: remove ssd-meta device classes
    shell: "ceph osd crush rm-device-class {{ dedicated_metadata_osds }}"

  - name: setup ssd-meta device class
    shell: "ceph osd crush set-device-class ssd-meta {{ dedicated_metadata_osds }}"

  - name: create replicated ssd-meta crush rule
    shell: ceph osd crush rule create-replicated class-ssd-meta default host ssd-meta

#- hosts: mdss
#  become: yes
#  tasks:
#  - name: install ceph debug packages
#    yum:
#      name: ceph-debuginfo
#      state: present

- hosts: clients
  become: yes
  tasks:
  # Use mode=0000/attributes=i to prevent tests blindly running on local file system.
  - name: set mnt dir
    file:
      attributes: i
      path: /cephfs/
      state: directory
      owner: root
      group: root
      mode: 0000

  - name: install dependencies
    yum:
      name: git,autoconf,automake,bc,gdb,htop,jq,python2-pyyaml,attr,wget,openssl-devel,elfutils-libelf-devel
      state: present

  - name: install Development tools
    yum:
      name: "@Development tools"
      state: present

  - name: clone smallfile
    git:
      repo: https://github.com/bengland2/smallfile
      dest: /root/smallfile
      update: no

  - name: check for ssh key
    find:
      paths: .ssh/
      patterns: "id_rsa.pub"
    register: find_ssh
    delegate_to: client-000
    run_once: true

  - name: create ssh key
    shell: ssh-keygen -b 4096 -t rsa -f /root/.ssh/id_rsa -q -N ""
    when: find_ssh.matched == 0
    delegate_to: client-000
    run_once: true

  - name: get public key
    shell: cat .ssh/id_rsa.pub
    register: client000pub
    delegate_to: client-000
    run_once: true

  - name: register client-000 public key with other clients
    lineinfile:
      path: .ssh/authorized_keys
      line: "{{ client000pub.stdout }}"
